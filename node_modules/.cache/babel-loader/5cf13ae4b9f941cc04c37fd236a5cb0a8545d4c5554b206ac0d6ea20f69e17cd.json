{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\layans\\\\Desktop\\\\task\\\\task4-secret-code\\\\src\\\\components\\\\container\\\\leftContent\\\\circlesList\\\\circlesRow\\\\circlesRow.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styles from \"./circlesList.module.css\";\n\n/**\r\n * reads states from store, then determines number of circles for each type\r\n * @param {Number} index\r\n * @returns correctRightPlace circles\r\n * @returns correctWrongPlace circles\r\n * @returns uncorrect circles\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Circle = props => {\n  _s();\n  const circleStates = useSelector(state => state.boxes.circleStates);\n  const blueCirclers = circleIndex => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.circle} ${styles.blueCircle}`\n    }, props.index * 10 + circleIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  };\n  const whiteCirclers = circleIndex => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.circle} ${styles.whiteCircle} `\n    }, props.index * 10 + circleIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  };\n  const emptyDiv = circleIndex => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, props.index * 10 + circleIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  };\n  let correctRightPlace = Array.apply(null, Array(parseInt(circleStates[props.index].correctRightPlace + \"\"))).map((element, circleIndex) => whiteCirclers(circleIndex));\n  let correctWrongPlace = Array.apply(null, Array(parseInt(circleStates[props.index].correctWrongPlace + \"\"))).map((element, circleIndex) => blueCirclers(circleIndex));\n  let uncorrect = Array.apply(null, Array(parseInt(circleStates[props.index].uncorrect + \"\"))).map((element, circleIndex) => emptyDiv(circleIndex));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [correctRightPlace, correctWrongPlace, uncorrect]\n  }, void 0, true);\n};\n_s(Circle, \"pqRnOXjqkcSBkQtUUbm2xk/4C1k=\", false, function () {\n  return [useSelector];\n});\n_c = Circle;\nexport default Circle;\nvar _c;\n$RefreshReg$(_c, \"Circle\");","map":{"version":3,"names":["React","useSelector","styles","Circle","props","circleStates","state","boxes","blueCirclers","circleIndex","circle","blueCircle","index","whiteCirclers","whiteCircle","emptyDiv","correctRightPlace","Array","apply","parseInt","map","element","correctWrongPlace","uncorrect"],"sources":["C:/Users/layans/Desktop/task/task4-secret-code/src/components/container/leftContent/circlesList/circlesRow/circlesRow.js"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styles from \"./circlesList.module.css\";\r\n\r\n/**\r\n * reads states from store, then determines number of circles for each type\r\n * @param {Number} index\r\n * @returns correctRightPlace circles\r\n * @returns correctWrongPlace circles\r\n * @returns uncorrect circles\r\n */\r\n\r\nconst Circle = (props) => {\r\n  const circleStates = useSelector((state) => state.boxes.circleStates);\r\n  const blueCirclers = (circleIndex) => {\r\n    return (\r\n      <div\r\n        className={`${styles.circle} ${styles.blueCircle}`}\r\n        key={props.index * 10 + circleIndex}\r\n      />\r\n    );\r\n  };\r\n  const whiteCirclers = (circleIndex) => {\r\n    return (\r\n      <div\r\n        className={`${styles.circle} ${styles.whiteCircle} `}\r\n        key={props.index * 10 + circleIndex}\r\n      />\r\n    );\r\n  };\r\n  const emptyDiv = (circleIndex) => {\r\n    return <div key={props.index * 10 + circleIndex} />;\r\n  };\r\n  let correctRightPlace = Array.apply(\r\n    null,\r\n    Array(parseInt(circleStates[props.index].correctRightPlace + \"\"))\r\n  ).map((element, circleIndex) => whiteCirclers(circleIndex));\r\n  let correctWrongPlace = Array.apply(\r\n    null,\r\n    Array(parseInt(circleStates[props.index].correctWrongPlace + \"\"))\r\n  ).map((element, circleIndex) => blueCirclers(circleIndex));\r\n  let uncorrect = Array.apply(\r\n    null,\r\n    Array(parseInt(circleStates[props.index].uncorrect + \"\"))\r\n  ).map((element, circleIndex) => emptyDiv(circleIndex));\r\n  return (\r\n    <>\r\n      {correctRightPlace}\r\n      {correctWrongPlace}\r\n      {uncorrect}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Circle;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,0BAA0B;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAQA,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAA;EACxB,MAAMC,YAAY,GAAGJ,WAAW,CAAEK,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,YAAY,CAAC;EACrE,MAAMG,YAAY,GAAIC,WAAW,IAAK;IACpC,oBACE;MACE,SAAS,EAAG,GAAEP,MAAM,CAACQ,MAAO,IAAGR,MAAM,CAACS,UAAW;IAAE,GAC9CP,KAAK,CAACQ,KAAK,GAAG,EAAE,GAAGH,WAAW;MAAA;MAAA;MAAA;IAAA,QACnC;EAEN,CAAC;EACD,MAAMI,aAAa,GAAIJ,WAAW,IAAK;IACrC,oBACE;MACE,SAAS,EAAG,GAAEP,MAAM,CAACQ,MAAO,IAAGR,MAAM,CAACY,WAAY;IAAG,GAChDV,KAAK,CAACQ,KAAK,GAAG,EAAE,GAAGH,WAAW;MAAA;MAAA;MAAA;IAAA,QACnC;EAEN,CAAC;EACD,MAAMM,QAAQ,GAAIN,WAAW,IAAK;IAChC,oBAAO,mBAAUL,KAAK,CAACQ,KAAK,GAAG,EAAE,GAAGH,WAAW;MAAA;MAAA;MAAA;IAAA,QAAI;EACrD,CAAC;EACD,IAAIO,iBAAiB,GAAGC,KAAK,CAACC,KAAK,CACjC,IAAI,EACJD,KAAK,CAACE,QAAQ,CAACd,YAAY,CAACD,KAAK,CAACQ,KAAK,CAAC,CAACI,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAClE,CAACI,GAAG,CAAC,CAACC,OAAO,EAAEZ,WAAW,KAAKI,aAAa,CAACJ,WAAW,CAAC,CAAC;EAC3D,IAAIa,iBAAiB,GAAGL,KAAK,CAACC,KAAK,CACjC,IAAI,EACJD,KAAK,CAACE,QAAQ,CAACd,YAAY,CAACD,KAAK,CAACQ,KAAK,CAAC,CAACU,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAClE,CAACF,GAAG,CAAC,CAACC,OAAO,EAAEZ,WAAW,KAAKD,YAAY,CAACC,WAAW,CAAC,CAAC;EAC1D,IAAIc,SAAS,GAAGN,KAAK,CAACC,KAAK,CACzB,IAAI,EACJD,KAAK,CAACE,QAAQ,CAACd,YAAY,CAACD,KAAK,CAACQ,KAAK,CAAC,CAACW,SAAS,GAAG,EAAE,CAAC,CAAC,CAC1D,CAACH,GAAG,CAAC,CAACC,OAAO,EAAEZ,WAAW,KAAKM,QAAQ,CAACN,WAAW,CAAC,CAAC;EACtD,oBACE;IAAA,WACGO,iBAAiB,EACjBM,iBAAiB,EACjBC,SAAS;EAAA,gBACT;AAEP,CAAC;AAAC,GAxCIpB,MAAM;EAAA,QACWF,WAAW;AAAA;AAAA,KAD5BE,MAAM;AA0CZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}