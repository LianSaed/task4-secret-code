{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n/**\r\n * boxesValues: stores the input value of current enabled line of boxes\r\n * RandomValues: stores the initiated random 4 digits of the secret code\r\n * circleStates: stores the number of the different  states of the circles\r\n * currentEnabledIndex: stores the number of the enabled input line\r\n * validInput: acts as a counter to the valid input boxes\r\n */\nconst boxesSlice = createSlice({\n  name: \"boxes\",\n  initialState: {\n    boxesValues: [],\n    allBoxesValues: Array(8).fill(null).map(() => Array(4).fill(null)),\n    RandomValues: [],\n    circleStates: [],\n    currentEnabledIndex: NaN,\n    validInput: 4\n  },\n  reducers: {\n    start(state) {\n      state.RandomValues = Array(4).fill().map(() => Math.floor(10 * Math.random())); //fill array of size 4 with random numbers from 0 to 9\n      state.currentEnabledIndex = 0;\n      console.log(`the random key is ${state.RandomValues}`);\n      state.circleStates.length = 0;\n      state.allBoxesValues.length = 0;\n      state.temp = \"\";\n    },\n    end(state) {\n      state.currentEnabledIndex = NaN;\n    },\n    validInputFunction(state, action) {\n      const value = action.payload;\n      state.validInput += parseInt(value.num + \"\");\n    },\n    setBoxes(state, action) {\n      const boxValue = action.payload;\n      let index = parseInt(boxValue.index + \"\");\n      let value = parseInt(boxValue.value + \"\");\n      state.allBoxesValues[state.currentEnabledIndex][index] = value;\n      state.boxesValues[index] = value;\n    },\n    incrementEnableIndex(state) {\n      state.currentEnabledIndex++;\n    },\n    check(state) {\n      let correctRightPlace = 0;\n      let correctWrongPlace = 0;\n      let uncorrect = 0;\n      let tempRandArray = state.RandomValues;\n      let tempBoxArray = state.boxesValues;\n      for (let i = 0; i < 4; i++) {\n        // forech value in RandomValues array\n        let tempIndex = -1;\n        let tempValue = state.RandomValues[i];\n        for (var j = 0; j < tempBoxArray.length; j++) {\n          // forech value in boxesValues array\n          if (tempBoxArray[j] === tempValue) {\n            //check if boxesValues contains the random key value, if true break\n            tempIndex = j;\n            break;\n          }\n        }\n        if (tempIndex !== -1) {\n          if (tempIndex === i) {\n            //if the index of the box is equal to the index of the random value\n            correctRightPlace++;\n            tempBoxArray[tempIndex] = NaN;\n          } else if (tempRandArray[tempIndex] !== tempBoxArray[tempIndex]) {\n            //what can be correct but in wrong place can also be correct and in right place for other indices\n            //so check if the other box index is not equal to random value\n            correctWrongPlace++;\n            tempBoxArray[tempIndex] = NaN;\n          } else {\n            uncorrect++;\n          }\n        } else {\n          uncorrect++;\n        }\n      }\n      state.circleStates.push({\n        index: state.currentEnabledIndex,\n        correctRightPlace,\n        correctWrongPlace,\n        uncorrect\n      });\n      state.boxesValues.length = 0;\n    }\n  }\n});\nexport const boxesActions = boxesSlice.actions;\nexport default boxesSlice;","map":{"version":3,"names":["createSlice","boxesSlice","name","initialState","boxesValues","allBoxesValues","Array","fill","map","RandomValues","circleStates","currentEnabledIndex","NaN","validInput","reducers","start","state","Math","floor","random","console","log","length","temp","end","validInputFunction","action","value","payload","parseInt","num","setBoxes","boxValue","index","incrementEnableIndex","check","correctRightPlace","correctWrongPlace","uncorrect","tempRandArray","tempBoxArray","i","tempIndex","tempValue","j","push","boxesActions","actions"],"sources":["C:/Users/layans/Desktop/task/task4-secret-code/src/store/boxCheck.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n/**\r\n * boxesValues: stores the input value of current enabled line of boxes\r\n * RandomValues: stores the initiated random 4 digits of the secret code\r\n * circleStates: stores the number of the different  states of the circles\r\n * currentEnabledIndex: stores the number of the enabled input line\r\n * validInput: acts as a counter to the valid input boxes\r\n */\r\nconst boxesSlice = createSlice({\r\n  name: \"boxes\",\r\n  initialState: {\r\n    boxesValues: [],\r\n    allBoxesValues: Array(8).fill(null).map(()=>Array(4).fill(null)),\r\n    RandomValues: [],\r\n    circleStates: [],\r\n    currentEnabledIndex: NaN,\r\n    validInput: 4,\r\n  },\r\n  reducers: {\r\n    start(state) {\r\n      state.RandomValues = Array(4)\r\n        .fill()\r\n        .map(() => Math.floor(10 * Math.random())); //fill array of size 4 with random numbers from 0 to 9\r\n      state.currentEnabledIndex = 0;\r\n      console.log(`the random key is ${state.RandomValues}`);\r\n      state.circleStates.length = 0;\r\n      state.allBoxesValues.length = 0;\r\n      state.temp = \"\";\r\n    },\r\n\r\n    end(state) {\r\n      state.currentEnabledIndex = NaN;\r\n    },\r\n    validInputFunction(state, action) {\r\n      const value = action.payload;\r\n      state.validInput += parseInt(value.num + \"\");\r\n    },\r\n    setBoxes(state, action) {\r\n      const boxValue = action.payload;\r\n      let index = parseInt(boxValue.index + \"\");\r\n      let value = parseInt(boxValue.value + \"\");\r\n      state.allBoxesValues[state.currentEnabledIndex][index] = value;\r\n      state.boxesValues[index] = value;\r\n    },\r\n    incrementEnableIndex(state) {\r\n      state.currentEnabledIndex++;\r\n    },\r\n    check(state) {\r\n      let correctRightPlace = 0;\r\n      let correctWrongPlace = 0;\r\n      let uncorrect = 0;\r\n      let tempRandArray = state.RandomValues;\r\n      let tempBoxArray = state.boxesValues;\r\n      for (let i = 0; i < 4; i++) {\r\n        // forech value in RandomValues array\r\n        let tempIndex = -1;\r\n        let tempValue = state.RandomValues[i];\r\n        for (var j = 0; j < tempBoxArray.length; j++) {\r\n          // forech value in boxesValues array\r\n          if (tempBoxArray[j] === tempValue) {\r\n            //check if boxesValues contains the random key value, if true break\r\n            tempIndex = j;\r\n            break;\r\n          }\r\n        }\r\n        if (tempIndex !== -1) {\r\n          if (tempIndex === i) {\r\n            //if the index of the box is equal to the index of the random value\r\n            correctRightPlace++;\r\n            tempBoxArray[tempIndex] = NaN;\r\n          } else if (tempRandArray[tempIndex] !== tempBoxArray[tempIndex]) {\r\n            //what can be correct but in wrong place can also be correct and in right place for other indices\r\n            //so check if the other box index is not equal to random value\r\n            correctWrongPlace++;\r\n            tempBoxArray[tempIndex] = NaN;\r\n          } else {\r\n            uncorrect++;\r\n          }\r\n        } else {\r\n          uncorrect++;\r\n        }\r\n      }\r\n      state.circleStates.push({\r\n        index: state.currentEnabledIndex,\r\n        correctRightPlace,\r\n        correctWrongPlace,\r\n        uncorrect,\r\n      });\r\n      state.boxesValues.length = 0;\r\n    },\r\n  },\r\n});\r\n\r\nexport const boxesActions = boxesSlice.actions;\r\n\r\nexport default boxesSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}