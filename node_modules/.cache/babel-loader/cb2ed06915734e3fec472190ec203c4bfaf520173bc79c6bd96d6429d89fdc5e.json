{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst boxesSlice = createSlice({\n  name: \"boxes\",\n  initialState: {\n    boxesValues: [],\n    RandomValues: [],\n    circleStates: [],\n    currentEnabledIndex: NaN\n  },\n  reducers: {\n    start(state) {\n      state.RandomValues = Array(4).fill().map(() => Math.floor(10 * Math.random())); //fill array of size 4 with random numbers from 0 to 9\n      state.currentEnabledIndex = 0;\n      console.log(`the random key is ${state.RandomValues}`);\n    },\n    end(state) {\n      state.currentEnabledIndex = NaN;\n      state.circleStates.length = 0;\n    },\n    setBoxes(state, action) {\n      const boxValue = action.payload;\n      let index = parseInt(boxValue.index + \"\");\n      let value = parseInt(boxValue.value + \"\");\n      state.boxesValues[index] = value;\n    },\n    incrementEnableIndex(state) {\n      state.currentEnabledIndex++;\n    },\n    check(state) {\n      let correctRightPlace = 0;\n      let correctWrongPlace = 0;\n      let uncorrect = 0;\n      let tempRandArray = state.RandomValues;\n      let tempBoxArray = state.boxesValues;\n      for (let i = 0; i < 4; i++) {\n        let tempIndex = -1;\n        let tempValue = state.RandomValues[i];\n        for (var j = 0; j < tempBoxArray.length; j++) {\n          if (tempBoxArray[j] === tempValue) {\n            tempIndex = j;\n            break;\n          }\n        }\n        console.log(tempIndex);\n        if (tempIndex !== -1) {\n          if (tempIndex === i) {\n            correctRightPlace++;\n            tempBoxArray[tempIndex] = NaN;\n          } else if (tempRandArray[tempIndex] !== tempBoxArray[tempIndex]) {\n            //what can be correct but in wrong place can also be correct and in right place for other boxes\n            correctWrongPlace++;\n            tempBoxArray[tempIndex] = NaN;\n          }\n        } else {\n          uncorrect++;\n        }\n        //tempRandArray.shift();\n      }\n\n      state.circleStates.push({\n        index: state.currentEnabledIndex,\n        correctRightPlace,\n        correctWrongPlace,\n        uncorrect\n      });\n      console.log(`index: ${state.currentEnabledIndex}`);\n      console.log(`correctRightPlace: ${correctRightPlace}`);\n      console.log(`correctWrongPlace: ${correctWrongPlace}`);\n      console.log(`uncorrect: ${uncorrect}`);\n    }\n  }\n});\nexport const boxesActions = boxesSlice.actions;\nexport default boxesSlice;","map":{"version":3,"names":["createSlice","boxesSlice","name","initialState","boxesValues","RandomValues","circleStates","currentEnabledIndex","NaN","reducers","start","state","Array","fill","map","Math","floor","random","console","log","end","length","setBoxes","action","boxValue","payload","index","parseInt","value","incrementEnableIndex","check","correctRightPlace","correctWrongPlace","uncorrect","tempRandArray","tempBoxArray","i","tempIndex","tempValue","j","push","boxesActions","actions"],"sources":["C:/Users/layans/Desktop/task/task4-secret-code/src/store/boxCheck.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst boxesSlice = createSlice({\r\n  name: \"boxes\",\r\n  initialState: {\r\n    boxesValues: [],\r\n    RandomValues: [],\r\n    circleStates: [],\r\n    currentEnabledIndex: NaN,\r\n  },\r\n  reducers: {\r\n      start(state) {\r\n          state.RandomValues = Array(4).fill().map(() => Math.floor(10 * Math.random())); //fill array of size 4 with random numbers from 0 to 9\r\n          state.currentEnabledIndex = 0;\r\n          console.log(`the random key is ${state.RandomValues}`);\r\n        },\r\n      end(state) {\r\n          state.currentEnabledIndex = NaN;\r\n          state.circleStates.length = 0\r\n      }\r\n      ,\r\n    setBoxes(state, action) {\r\n      const boxValue = action.payload;\r\n      let index = parseInt(boxValue.index + \"\");\r\n      let value = parseInt(boxValue.value + \"\");\r\n      state.boxesValues[index] = value;\r\n    },\r\n    incrementEnableIndex(state) {\r\n      state.currentEnabledIndex++;\r\n    },\r\n    check(state) {\r\n      let correctRightPlace = 0;\r\n      let correctWrongPlace = 0;\r\n      let uncorrect = 0;\r\n      let tempRandArray = state.RandomValues;\r\n      let tempBoxArray = state.boxesValues;\r\n      for (let i = 0; i < 4; i++) {\r\n        let tempIndex = -1;\r\n        let tempValue = state.RandomValues[i];\r\n        for (var j = 0; j < tempBoxArray.length; j++) {\r\n          if (tempBoxArray[j] === tempValue) {\r\n            tempIndex = j;\r\n            break;\r\n          }\r\n        }\r\n        console.log(tempIndex);\r\n        if (tempIndex !== -1) {\r\n          if (tempIndex === i) {\r\n            correctRightPlace++;\r\n            tempBoxArray[tempIndex] = NaN;\r\n          } else if (tempRandArray[tempIndex] !== tempBoxArray[tempIndex]) {\r\n            //what can be correct but in wrong place can also be correct and in right place for other boxes\r\n            correctWrongPlace++;\r\n            tempBoxArray[tempIndex] = NaN;\r\n          }\r\n        } else {\r\n          uncorrect++;\r\n        }\r\n        //tempRandArray.shift();\r\n      }\r\n      state.circleStates.push({\r\n        index: state.currentEnabledIndex,\r\n        correctRightPlace,\r\n        correctWrongPlace,\r\n        uncorrect,\r\n      });\r\n      console.log(`index: ${state.currentEnabledIndex}`);\r\n      console.log(`correctRightPlace: ${correctRightPlace}`);\r\n      console.log(`correctWrongPlace: ${correctWrongPlace}`);\r\n      console.log(`uncorrect: ${uncorrect}`);\r\n    },\r\n  },\r\n});\r\n\r\nexport const boxesActions = boxesSlice.actions;\r\n\r\nexport default boxesSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}